> Props are like passing arguments to a function, in react props in components
> Using props we made perform dynamic data rendering 
> Config Driven UI: Controlling UI using data or config which comes from backend . Config is nothing but the data based on that the carousel varies like data is different for pune , diff for mumbai or delhi etc .{***------important------***}
> res.cloudinary is CDN for image used by SWIGGY application to store all the images there.
> map , filter , reduce usage of js is most important in react.
> resData?.info; optional chaining
> (restlists.map((restaurant) => <RestaurantCard resData={restaurant}/>))
> Whenever we used map or loop on any element must have to add unique key or id .
> unique "key" property means each item has uniquely represent .
> Why need to add unique id ? Case : like if any restaurant container I need to add new restaurant card , react need to add card in existing cards lists with optimization but react didn't get id where to add new card So for react all cards are new so it re-renders the all cards and it is a costlier operation of DOM , that's why need to add unique key or id so card add in optimized way.
> React itself says never used index as unique key . why?{***------important------***}
> Everything whatever we can do in react is also do it by html , css , js then why react ? To make developer experience very fast and optimization web pages in backend side .
> Two type of export default export and named export 
 export default Header : default export 
 named export is used to export multiple things simultaneously add export front of variable .
 > While import named export we need to used {} like import {CDN_URL} from ...
 > While import default export we needn't to used anything like import CDN_URL from ...

        -Default Export/Import 
         
         export default Components;
         import Components from "path";

         -Named Export/Import

         export const Components;
         import {Components} from "path";

> All framework, libraries are tried to solved the data and ui layer sync changes (Data updated but UI is not updated as per filter of data)
> Faster , optimize DOM manipulation , virtual DOM 
> Super powerful variable made by Hooks called useState , Normal JS Variable 
> Hooks is just normal js utility function that is gives to us by react which have some inbuilt property
> React Hooks 
       useState() : Super powerful state variable in react , State means maintain the state of components
       useEffect() :
> const [list ,  setList] = useState([])(default value); function is called to trigger re-rendering .
> whenever the state variable change using setList() method react will render the header/components .
> To change the state of components or value we can't change using "=" but using setList() function ;
> Re-Rendering whole component not only specific component .
> How const variable is changes using setList function in usestate ? but it can't change the variable whole component is re-render and now same const variable is new for  the re-render component 
> DOM manipulation is faster in Reactjs that's why it is faster then other framework and libraries .
> React uses Reconciliation Algorithm called in React-16 which uses React Fiber in React-18 .
              *                   =>          *
       * * * * * * * * *                    * * *
 > Virtual DOM is not the actual Dom it is the representation of Actual DOM.
   React Element which is given a object is called virtual dom 

> Diff Algorithm means comparing the updated virtual dom ( object )and earlier virtual dom, tries to find out the difference then update the actual dom .
> https://github.com/acdlite/react-fiber-architecture 

> Monolithic means all the services in written in single projects , complexity triggered while working simultaneously
> Microservices means each services has different project and written separately . No one interrupt by other services.
> Two Approaches to fetch the data from backend

       1> Loads -> API call -> Render : in this case till the api fetch the data on UI not render
       2> Loads -> Render -> API call -> Re-render

       In Reactjs we used approach 2 render the whatever data in UI has , as API fetch the data Re-render the UI as updated data it is better for user experience

> useEffect run after the rendering the UI , this is the purpose of useEffect
> useEffect consist of two thing arrow function and dependency array, useEffect(()=>{},[])
> fetch() given by browser not by Js 
> CORS Policy : Our browser blocked to call from one origin to another origin
> Optional Chaining ** important ** list?.cards?.card?.
> Shimmer UI modern concept blank skelton of UI  *** important ***
> Show something to the screen till the data fetch for better user experience . 
> Conditional rendering : rendering on the basis of condition .
> when typing in search box each time components are re-render.
> Why React is fast , it has concept of virtual DOM , it has Reconciliation Algorithm which makes it faster in which it compare the previous dom and updated dom and compare it so well and efficiently instead of updated the whole DOM it findout the diff component in dom and updated that only which makes it faster .
> If no dependency array => useEffect is called on every render .
> If dependency array is empty = [] => useEffect is called on initial render(just once) .
> If dependency array is non empty => useEffect called everytime when state changes of dependency array .
> Never used useState out side of the component.
> Always try to use hooks at start of the components.
> Never create useState in if else ,  for loop it makes code inconsistent .
> React Router 
> whenever create routes we have to used routing configuration
> Use CreateBrowserRouter for the routing in react
> If url not found we can create separate component for error and render using errorElement .
> useRouteError hooks gives us all error which is in page so using this we can show detailed msg to user about the error
> children route 
> When used react never used anchor <a> tag for route why ? using this whole page is reload .
> It is resolved using link component given to us by react-router-dom we navigate to other page without reload the page  <Link to="/about">About</Link> refresh the component
> Two type of routing in web application ,  Client Side Routing , Server Side Routing
> React make single page application via Client Side Routing by just refresh the components
> useParams hooks provided by react router dom which is used to get parameter from the url 
> Class based components are older way to creating components 
> Interview Question asked Class Based Component ?
> Class based components has render method which return jsx .
> functional components which has return jsx .
> To received the props in class based component we need to used contructor to get props and super(props) to add "this.props"
> Why need super(props) ?
> State created when class instance created
> Loading class component means creating new instance of class
> Always created state variable in constructor **Important**
> this.setState function in react to change the state of state variable ** Important **
> const [count , setCount] = useState([]); in functional based components
> class About extends React.component{
       constructor(props){
              super(props)
              this.state = {
                     count:1,
              }
       }
       this.setState({
              count: this.state.count + 1,
       })
}  In class Based component , it update the only those state variable which is mentioned in this.setState({})
> What is class based component life cycle in react ?
> loading/mounting/render component in webpage 
> When class based component is loading contructor is called then render is called then componentDidMount() called this is the mount cycle or life cycle of the react ** Important ** 
> Contructor > Render > componentDidMount
> componentDidMount() used to make API calls like we used useEffect to make calls in functional component.
> React component life cycle diagram
> In DOM Manipulation React render the component combinely then it called didmount function which makes react faster
> ComponentDidUpdate() , ComponentDidMount() , ComponentWillUnmount()
> Make component which have only single responsibility . 
> Make customHooks in utility directory for best practice .
> Chunking / code splitting / lazy loading / on demand loading / dynamic importing / dynamic bundling make application in smaller chunks to make app optimize
> Lazy loading **** Important ****
> We add lazy loading to make separate bundle for components :=
 const Grocery = lazy(() => import("./components/Grocery"))
> But it gives us error because initially react have only index.jsx bundle and when we click on Grocery tab it's not there it takes little bit time that's why it gives us error just for milliseconds delay in response for that react has { Suspense } component
> Wrap component in Suspense component so till loading we show something 
<Suspense> <Grocery /> <Suspense>
